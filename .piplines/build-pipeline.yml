trigger:
  branches:
    include:
      - dev
      - staging
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Set environment-specific backend files and variable files
  terraformBackendFile: ''
  terraformVarFile: ''

stages:
  - stage: Build
    displayName: 'Terraform Build'
    jobs:
      - job: Terraform_Init_Validate
        displayName: 'Terraform Init and Validate'
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          - script: |
              echo "Branch Name: $(Build.SourceBranchName)"
              if [[ "$(Build.SourceBranchName)" == "dev" ]]; then
                echo "Setting variables for Dev environment..."
                echo "##vso[task.setvariable variable=terraformBackendFile]backend-dev.tf"
                echo "##vso[task.setvariable variable=terraformVarFile]/Environments/Development/dev.tfvars"
              elif [[ "$(Build.SourceBranchName)" == "staging" ]]; then
                echo "Setting variables for Staging environment..."
                echo "##vso[task.setvariable variable=terraformBackendFile]backend-staging.tf"
                echo "##vso[task.setvariable variable=terraformVarFile]/Environments/Staging/stage.tfvars"
              elif [[ "$(Build.SourceBranchName)" == "main" ]]; then
                echo "Setting variables for Production environment..."
                echo "##vso[task.setvariable variable=terraformBackendFile]backend-prod.tf"
                echo "##vso[task.setvariable variable=terraformVarFile]/Environments/Production/prod.tfvars"
              fi
            displayName: "Set Variables for Environment"
          # Initialize Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ARM'
              backendAzureRmResourceGroupName: 'terraform-state-rg'
              backendAzureRmStorageAccountName: 'tfstatestoragecloud'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: '$(terraformBackendFile)'
            displayName: 'Terraform Init'
          # Validate Terraform Code
          - script: |
              terraform validate
            displayName: 'Terraform Validate'
          # Package Terraform files (Create plan)
          - script: |
              terraform plan -var-file=$(terraformVarFile) -out=tfplan
            displayName: "Terraform Plan"

          - publish: $(Build.SourcesDirectory)/
            artifact: tfplan
            displayName: 'Publish Plan Artifacttf_version'
